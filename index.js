require('dotenv').config();
const { Telegraf } = require('telegraf');

const { mapArbitrageToButton } = require('./adapters');
const { ARBITRAGE_TYPE, EXCHANGE_NAME, FUNDING_TYPE, REGEX } = require('./constants');
const { getFundingRates } = require('./exchanges');
const { getTimeString, sleep } = require('./utils');
const { User } = require('./models');
const sequelize = require('./services/database.service');
const requestAuth = require('./middleware/request-auth.middleware');
const { findSpotArbitrage } = require('./spotArbitrage');

const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);

bot.telegram.setMyCommands([
  {
    command: 'spreads',
    description: '–°–ø–∏—Å–æ–∫ —Å–ø—Ä–µ–¥–æ–≤',
  },
  {
    command: 'spot_futures',
    description: '–°–ø–æ—Ç-—Ñ—å—é—á–µ—Ä—Å',
  },
  {
    command: 'spot_arbitrage',
    description: '–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞ —Å–ø–æ—Ç–µ',
  },
]);

async function parseSpotArbitrage() {
    console.log(`${getTimeString()}: –ü–æ–∏—Å–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π –Ω–∞ —Å–ø–æ—Ç–µ...`);
    const opportunities = await findSpotArbitrage();
    console.log(`${getTimeString()}: –ù–∞–π–¥–µ–Ω–æ ${opportunities.length} –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π.`);
    return opportunities;
}

bot.command('spot_arbitrage', async (ctx) => {
    ctx.reply('üîé –ü–æ–∏—Å–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –Ω–∞ —Å–ø–æ—Ç–æ–≤—ã—Ö —Ä—ã–Ω–∫–∞—Ö...');
    const opportunities = await parseSpotArbitrage();
    
    if (opportunities.length === 0) {
        ctx.reply('üö´ –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
    } else {
        let message = 'üí∞ –ù–∞–π–¥–µ–Ω—ã –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n\n';
        opportunities.forEach(op => {
            message += `üîπ ${op.symbol}:\n` +
                `üî∫ ${op.exchangeA}: ${op.priceA}$\n` +
                `üîª ${op.exchangeB}: ${op.priceB}$\n` +
                `üìä –†–∞–∑–Ω–∏—Ü–∞: ${op.percentDiff}\n\n`;
        });
        ctx.reply(message);
    }
});

(async function () {
  try {
    bot.launch();

    await sequelize.authenticate();
    await sequelize.sync();

    const superuser = await requestAuth(process.env.SUPERUSER);

    if (!superuser) {
      await User.create({ username: process.env.SUPERUSER });
    }

    while (true) {
      console.log(`${getTimeString()}: –ü–æ–∏—Å–∫ —Å–ø—Ä–µ–¥–æ–≤...`);
      const symbolsData = await parseFundingRatesData();
      findArbitrages(symbolsData);
      
      console.log(`${getTimeString()}: –ü–æ–∏—Å–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –Ω–∞ —Å–ø–æ—Ç–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É...`);
      
      console.log(`${getTimeString()}: –ü–æ–∏—Å–∫ –∑–∞–∫–æ–Ω—á–µ–Ω. –°–ª–µ–¥—É—é—â–∞—è –∏—Ç–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥.`);
      await sleep(10);
    }
  } catch (err) {
    console.log(err);
    await sequelize.close();
  }
})();
